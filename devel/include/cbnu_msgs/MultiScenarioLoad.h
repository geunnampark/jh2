// Generated by gencpp from file cbnu_msgs/MultiScenarioLoad.msg
// DO NOT EDIT!


#ifndef CBNU_MSGS_MESSAGE_MULTISCENARIOLOAD_H
#define CBNU_MSGS_MESSAGE_MULTISCENARIOLOAD_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace cbnu_msgs
{
template <class ContainerAllocator>
struct MultiScenarioLoad_
{
  typedef MultiScenarioLoad_<ContainerAllocator> Type;

  MultiScenarioLoad_()
    : file_name()
    , load_ego_vehicle_data()
    , load_surrounding_vehicle_data()
    , load_pedestrian_data()
    , load_object_data()  {
    }
  MultiScenarioLoad_(const ContainerAllocator& _alloc)
    : file_name(_alloc)
    , load_ego_vehicle_data(_alloc)
    , load_surrounding_vehicle_data(_alloc)
    , load_pedestrian_data(_alloc)
    , load_object_data(_alloc)  {
  (void)_alloc;
    }



   typedef std::vector<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > , typename ContainerAllocator::template rebind<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::other >  _file_name_type;
  _file_name_type file_name;

   typedef std::vector<uint8_t, typename ContainerAllocator::template rebind<uint8_t>::other >  _load_ego_vehicle_data_type;
  _load_ego_vehicle_data_type load_ego_vehicle_data;

   typedef std::vector<uint8_t, typename ContainerAllocator::template rebind<uint8_t>::other >  _load_surrounding_vehicle_data_type;
  _load_surrounding_vehicle_data_type load_surrounding_vehicle_data;

   typedef std::vector<uint8_t, typename ContainerAllocator::template rebind<uint8_t>::other >  _load_pedestrian_data_type;
  _load_pedestrian_data_type load_pedestrian_data;

   typedef std::vector<uint8_t, typename ContainerAllocator::template rebind<uint8_t>::other >  _load_object_data_type;
  _load_object_data_type load_object_data;





  typedef boost::shared_ptr< ::cbnu_msgs::MultiScenarioLoad_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::cbnu_msgs::MultiScenarioLoad_<ContainerAllocator> const> ConstPtr;

}; // struct MultiScenarioLoad_

typedef ::cbnu_msgs::MultiScenarioLoad_<std::allocator<void> > MultiScenarioLoad;

typedef boost::shared_ptr< ::cbnu_msgs::MultiScenarioLoad > MultiScenarioLoadPtr;
typedef boost::shared_ptr< ::cbnu_msgs::MultiScenarioLoad const> MultiScenarioLoadConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::cbnu_msgs::MultiScenarioLoad_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::cbnu_msgs::MultiScenarioLoad_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::cbnu_msgs::MultiScenarioLoad_<ContainerAllocator1> & lhs, const ::cbnu_msgs::MultiScenarioLoad_<ContainerAllocator2> & rhs)
{
  return lhs.file_name == rhs.file_name &&
    lhs.load_ego_vehicle_data == rhs.load_ego_vehicle_data &&
    lhs.load_surrounding_vehicle_data == rhs.load_surrounding_vehicle_data &&
    lhs.load_pedestrian_data == rhs.load_pedestrian_data &&
    lhs.load_object_data == rhs.load_object_data;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::cbnu_msgs::MultiScenarioLoad_<ContainerAllocator1> & lhs, const ::cbnu_msgs::MultiScenarioLoad_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace cbnu_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::cbnu_msgs::MultiScenarioLoad_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::cbnu_msgs::MultiScenarioLoad_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::cbnu_msgs::MultiScenarioLoad_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::cbnu_msgs::MultiScenarioLoad_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::cbnu_msgs::MultiScenarioLoad_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::cbnu_msgs::MultiScenarioLoad_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::cbnu_msgs::MultiScenarioLoad_<ContainerAllocator> >
{
  static const char* value()
  {
    return "72663bbaba4c22d9e77ddf06c9dac39c";
  }

  static const char* value(const ::cbnu_msgs::MultiScenarioLoad_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x72663bbaba4c22d9ULL;
  static const uint64_t static_value2 = 0xe77ddf06c9dac39cULL;
};

template<class ContainerAllocator>
struct DataType< ::cbnu_msgs::MultiScenarioLoad_<ContainerAllocator> >
{
  static const char* value()
  {
    return "cbnu_msgs/MultiScenarioLoad";
  }

  static const char* value(const ::cbnu_msgs::MultiScenarioLoad_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::cbnu_msgs::MultiScenarioLoad_<ContainerAllocator> >
{
  static const char* value()
  {
    return "string[] file_name\n"
"bool[] load_ego_vehicle_data\n"
"bool[] load_surrounding_vehicle_data\n"
"bool[] load_pedestrian_data\n"
"bool[] load_object_data\n"
;
  }

  static const char* value(const ::cbnu_msgs::MultiScenarioLoad_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::cbnu_msgs::MultiScenarioLoad_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.file_name);
      stream.next(m.load_ego_vehicle_data);
      stream.next(m.load_surrounding_vehicle_data);
      stream.next(m.load_pedestrian_data);
      stream.next(m.load_object_data);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct MultiScenarioLoad_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::cbnu_msgs::MultiScenarioLoad_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::cbnu_msgs::MultiScenarioLoad_<ContainerAllocator>& v)
  {
    s << indent << "file_name[]" << std::endl;
    for (size_t i = 0; i < v.file_name.size(); ++i)
    {
      s << indent << "  file_name[" << i << "]: ";
      Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.file_name[i]);
    }
    s << indent << "load_ego_vehicle_data[]" << std::endl;
    for (size_t i = 0; i < v.load_ego_vehicle_data.size(); ++i)
    {
      s << indent << "  load_ego_vehicle_data[" << i << "]: ";
      Printer<uint8_t>::stream(s, indent + "  ", v.load_ego_vehicle_data[i]);
    }
    s << indent << "load_surrounding_vehicle_data[]" << std::endl;
    for (size_t i = 0; i < v.load_surrounding_vehicle_data.size(); ++i)
    {
      s << indent << "  load_surrounding_vehicle_data[" << i << "]: ";
      Printer<uint8_t>::stream(s, indent + "  ", v.load_surrounding_vehicle_data[i]);
    }
    s << indent << "load_pedestrian_data[]" << std::endl;
    for (size_t i = 0; i < v.load_pedestrian_data.size(); ++i)
    {
      s << indent << "  load_pedestrian_data[" << i << "]: ";
      Printer<uint8_t>::stream(s, indent + "  ", v.load_pedestrian_data[i]);
    }
    s << indent << "load_object_data[]" << std::endl;
    for (size_t i = 0; i < v.load_object_data.size(); ++i)
    {
      s << indent << "  load_object_data[" << i << "]: ";
      Printer<uint8_t>::stream(s, indent + "  ", v.load_object_data[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // CBNU_MSGS_MESSAGE_MULTISCENARIOLOAD_H
