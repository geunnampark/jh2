// Generated by gencpp from file cbnu_msgs/Gps.msg
// DO NOT EDIT!


#ifndef CBNU_MSGS_MESSAGE_GPS_H
#define CBNU_MSGS_MESSAGE_GPS_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace cbnu_msgs
{
template <class ContainerAllocator>
struct Gps_
{
  typedef Gps_<ContainerAllocator> Type;

  Gps_()
    : pos_lat(0.0)
    , pos_long(0.0)
    , heading(0.0)
    , time()  {
    }
  Gps_(const ContainerAllocator& _alloc)
    : pos_lat(0.0)
    , pos_long(0.0)
    , heading(0.0)
    , time()  {
  (void)_alloc;
    }



   typedef float _pos_lat_type;
  _pos_lat_type pos_lat;

   typedef float _pos_long_type;
  _pos_long_type pos_long;

   typedef float _heading_type;
  _heading_type heading;

   typedef ros::Time _time_type;
  _time_type time;





  typedef boost::shared_ptr< ::cbnu_msgs::Gps_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::cbnu_msgs::Gps_<ContainerAllocator> const> ConstPtr;

}; // struct Gps_

typedef ::cbnu_msgs::Gps_<std::allocator<void> > Gps;

typedef boost::shared_ptr< ::cbnu_msgs::Gps > GpsPtr;
typedef boost::shared_ptr< ::cbnu_msgs::Gps const> GpsConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::cbnu_msgs::Gps_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::cbnu_msgs::Gps_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::cbnu_msgs::Gps_<ContainerAllocator1> & lhs, const ::cbnu_msgs::Gps_<ContainerAllocator2> & rhs)
{
  return lhs.pos_lat == rhs.pos_lat &&
    lhs.pos_long == rhs.pos_long &&
    lhs.heading == rhs.heading &&
    lhs.time == rhs.time;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::cbnu_msgs::Gps_<ContainerAllocator1> & lhs, const ::cbnu_msgs::Gps_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace cbnu_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::cbnu_msgs::Gps_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::cbnu_msgs::Gps_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::cbnu_msgs::Gps_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::cbnu_msgs::Gps_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::cbnu_msgs::Gps_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::cbnu_msgs::Gps_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::cbnu_msgs::Gps_<ContainerAllocator> >
{
  static const char* value()
  {
    return "f291b40ae5c9f111db04d93e1694b68b";
  }

  static const char* value(const ::cbnu_msgs::Gps_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xf291b40ae5c9f111ULL;
  static const uint64_t static_value2 = 0xdb04d93e1694b68bULL;
};

template<class ContainerAllocator>
struct DataType< ::cbnu_msgs::Gps_<ContainerAllocator> >
{
  static const char* value()
  {
    return "cbnu_msgs/Gps";
  }

  static const char* value(const ::cbnu_msgs::Gps_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::cbnu_msgs::Gps_<ContainerAllocator> >
{
  static const char* value()
  {
    return "float32 pos_lat\n"
"float32 pos_long\n"
"float32 heading\n"
"time time\n"
"\n"
;
  }

  static const char* value(const ::cbnu_msgs::Gps_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::cbnu_msgs::Gps_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.pos_lat);
      stream.next(m.pos_long);
      stream.next(m.heading);
      stream.next(m.time);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct Gps_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::cbnu_msgs::Gps_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::cbnu_msgs::Gps_<ContainerAllocator>& v)
  {
    s << indent << "pos_lat: ";
    Printer<float>::stream(s, indent + "  ", v.pos_lat);
    s << indent << "pos_long: ";
    Printer<float>::stream(s, indent + "  ", v.pos_long);
    s << indent << "heading: ";
    Printer<float>::stream(s, indent + "  ", v.heading);
    s << indent << "time: ";
    Printer<ros::Time>::stream(s, indent + "  ", v.time);
  }
};

} // namespace message_operations
} // namespace ros

#endif // CBNU_MSGS_MESSAGE_GPS_H
