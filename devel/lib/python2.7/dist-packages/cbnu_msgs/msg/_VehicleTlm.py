# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from cbnu_msgs/VehicleTlm.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class VehicleTlm(genpy.Message):
  _md5sum = "140037dd6fb977de3cb0c0931cbb58a4"
  _type = "cbnu_msgs/VehicleTlm"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """float64 ned_latitude
float64 ned_longitude
float64 ned_heading

float64 speed

float64 steering_angle
float64 steering_angular_velocity

float64 wheel_velocity_fl
float64 wheel_velocity_fr
float64 wheel_velocity_rl
float64 wheel_velocity_rr

float64 wheel_size_fl
float64 wheel_size_fr
float64 wheel_size_rl
float64 wheel_size_rr

float64 acceleration_left
float64 acceleration_forward

float64 roll
float64 pitch
float64 yaw

float64 wheel_base
float64 curb_weight
"""
  __slots__ = ['ned_latitude','ned_longitude','ned_heading','speed','steering_angle','steering_angular_velocity','wheel_velocity_fl','wheel_velocity_fr','wheel_velocity_rl','wheel_velocity_rr','wheel_size_fl','wheel_size_fr','wheel_size_rl','wheel_size_rr','acceleration_left','acceleration_forward','roll','pitch','yaw','wheel_base','curb_weight']
  _slot_types = ['float64','float64','float64','float64','float64','float64','float64','float64','float64','float64','float64','float64','float64','float64','float64','float64','float64','float64','float64','float64','float64']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       ned_latitude,ned_longitude,ned_heading,speed,steering_angle,steering_angular_velocity,wheel_velocity_fl,wheel_velocity_fr,wheel_velocity_rl,wheel_velocity_rr,wheel_size_fl,wheel_size_fr,wheel_size_rl,wheel_size_rr,acceleration_left,acceleration_forward,roll,pitch,yaw,wheel_base,curb_weight

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(VehicleTlm, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.ned_latitude is None:
        self.ned_latitude = 0.
      if self.ned_longitude is None:
        self.ned_longitude = 0.
      if self.ned_heading is None:
        self.ned_heading = 0.
      if self.speed is None:
        self.speed = 0.
      if self.steering_angle is None:
        self.steering_angle = 0.
      if self.steering_angular_velocity is None:
        self.steering_angular_velocity = 0.
      if self.wheel_velocity_fl is None:
        self.wheel_velocity_fl = 0.
      if self.wheel_velocity_fr is None:
        self.wheel_velocity_fr = 0.
      if self.wheel_velocity_rl is None:
        self.wheel_velocity_rl = 0.
      if self.wheel_velocity_rr is None:
        self.wheel_velocity_rr = 0.
      if self.wheel_size_fl is None:
        self.wheel_size_fl = 0.
      if self.wheel_size_fr is None:
        self.wheel_size_fr = 0.
      if self.wheel_size_rl is None:
        self.wheel_size_rl = 0.
      if self.wheel_size_rr is None:
        self.wheel_size_rr = 0.
      if self.acceleration_left is None:
        self.acceleration_left = 0.
      if self.acceleration_forward is None:
        self.acceleration_forward = 0.
      if self.roll is None:
        self.roll = 0.
      if self.pitch is None:
        self.pitch = 0.
      if self.yaw is None:
        self.yaw = 0.
      if self.wheel_base is None:
        self.wheel_base = 0.
      if self.curb_weight is None:
        self.curb_weight = 0.
    else:
      self.ned_latitude = 0.
      self.ned_longitude = 0.
      self.ned_heading = 0.
      self.speed = 0.
      self.steering_angle = 0.
      self.steering_angular_velocity = 0.
      self.wheel_velocity_fl = 0.
      self.wheel_velocity_fr = 0.
      self.wheel_velocity_rl = 0.
      self.wheel_velocity_rr = 0.
      self.wheel_size_fl = 0.
      self.wheel_size_fr = 0.
      self.wheel_size_rl = 0.
      self.wheel_size_rr = 0.
      self.acceleration_left = 0.
      self.acceleration_forward = 0.
      self.roll = 0.
      self.pitch = 0.
      self.yaw = 0.
      self.wheel_base = 0.
      self.curb_weight = 0.

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_21d().pack(_x.ned_latitude, _x.ned_longitude, _x.ned_heading, _x.speed, _x.steering_angle, _x.steering_angular_velocity, _x.wheel_velocity_fl, _x.wheel_velocity_fr, _x.wheel_velocity_rl, _x.wheel_velocity_rr, _x.wheel_size_fl, _x.wheel_size_fr, _x.wheel_size_rl, _x.wheel_size_rr, _x.acceleration_left, _x.acceleration_forward, _x.roll, _x.pitch, _x.yaw, _x.wheel_base, _x.curb_weight))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      _x = self
      start = end
      end += 168
      (_x.ned_latitude, _x.ned_longitude, _x.ned_heading, _x.speed, _x.steering_angle, _x.steering_angular_velocity, _x.wheel_velocity_fl, _x.wheel_velocity_fr, _x.wheel_velocity_rl, _x.wheel_velocity_rr, _x.wheel_size_fl, _x.wheel_size_fr, _x.wheel_size_rl, _x.wheel_size_rr, _x.acceleration_left, _x.acceleration_forward, _x.roll, _x.pitch, _x.yaw, _x.wheel_base, _x.curb_weight,) = _get_struct_21d().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_21d().pack(_x.ned_latitude, _x.ned_longitude, _x.ned_heading, _x.speed, _x.steering_angle, _x.steering_angular_velocity, _x.wheel_velocity_fl, _x.wheel_velocity_fr, _x.wheel_velocity_rl, _x.wheel_velocity_rr, _x.wheel_size_fl, _x.wheel_size_fr, _x.wheel_size_rl, _x.wheel_size_rr, _x.acceleration_left, _x.acceleration_forward, _x.roll, _x.pitch, _x.yaw, _x.wheel_base, _x.curb_weight))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      _x = self
      start = end
      end += 168
      (_x.ned_latitude, _x.ned_longitude, _x.ned_heading, _x.speed, _x.steering_angle, _x.steering_angular_velocity, _x.wheel_velocity_fl, _x.wheel_velocity_fr, _x.wheel_velocity_rl, _x.wheel_velocity_rr, _x.wheel_size_fl, _x.wheel_size_fr, _x.wheel_size_rl, _x.wheel_size_rr, _x.acceleration_left, _x.acceleration_forward, _x.roll, _x.pitch, _x.yaw, _x.wheel_base, _x.curb_weight,) = _get_struct_21d().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_21d = None
def _get_struct_21d():
    global _struct_21d
    if _struct_21d is None:
        _struct_21d = struct.Struct("<21d")
    return _struct_21d
